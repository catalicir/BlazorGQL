[{"Name":"Commands","SourceText":"// <auto-generated/>\r\n#nullable enable\r\n\r\nnamespace BlazorGQL.GraphQL\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class GetPlatformsResult : global::System.IEquatable<GetPlatformsResult>, IGetPlatformsResult\r\n    {\r\n        public GetPlatformsResult(global::System.Collections.Generic.IReadOnlyList<global::BlazorGQL.GraphQL.IGetPlatforms_Platform?>? platform)\r\n        {\r\n            Platform = platform;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::BlazorGQL.GraphQL.IGetPlatforms_Platform?>? Platform { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetPlatformsResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Platform, other.Platform));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetPlatformsResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (Platform != null)\r\n                {\r\n                    foreach (var Platform_elm in Platform)\r\n                    {\r\n                        if (Platform_elm != null)\r\n                        {\r\n                            hash ^= 397 * Platform_elm.GetHashCode();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents any SW or service with a command line\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class GetPlatforms_Platform_Platform : global::System.IEquatable<GetPlatforms_Platform_Platform>, IGetPlatforms_Platform_Platform\r\n    {\r\n        public GetPlatforms_Platform_Platform(global::System.Int32 id, global::System.String name)\r\n        {\r\n            Id = id;\r\n            Name = name;\r\n        }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String Name { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetPlatforms_Platform_Platform? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Id == other.Id) && Name.Equals(other.Name);\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetPlatforms_Platform_Platform)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * Id.GetHashCode();\r\n                hash ^= 397 * Name.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public interface IGetPlatformsResult\r\n    {\r\n        public global::System.Collections.Generic.IReadOnlyList<global::BlazorGQL.GraphQL.IGetPlatforms_Platform?>? Platform { get; }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents any SW or service with a command line\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public interface IGetPlatforms_Platform\r\n    {\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String Name { get; }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents any SW or service with a command line\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public interface IGetPlatforms_Platform_Platform : IGetPlatforms_Platform\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetPlatforms GraphQL operation\r\n    /// <code>\r\n    /// query GetPlatforms {\r\n    ///   platform(order: { name: ASC }) {\r\n    ///     __typename\r\n    ///     id\r\n    ///     name\r\n    ///     ... on Platform {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class GetPlatformsQueryDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private GetPlatformsQueryDocument()\r\n        {\r\n        }\r\n\r\n        public static GetPlatformsQueryDocument Instance { get; } = new GetPlatformsQueryDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"7a38ebdc64c4ad5ea9c7b3801b5784c6\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetPlatforms GraphQL operation\r\n    /// <code>\r\n    /// query GetPlatforms {\r\n    ///   platform(order: { name: ASC }) {\r\n    ///     __typename\r\n    ///     id\r\n    ///     name\r\n    ///     ... on Platform {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class GetPlatformsQuery : global::BlazorGQL.GraphQL.IGetPlatformsQuery\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IGetPlatformsResult> _operationExecutor;\r\n        public GetPlatformsQuery(global::StrawberryShake.IOperationExecutor<IGetPlatformsResult> operationExecutor)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPlatformsResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPlatformsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest();\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPlatformsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest();\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest()\r\n        {\r\n            return CreateRequest(null);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: GetPlatformsQueryDocument.Instance.Hash.Value, name: \"GetPlatforms\", document: GetPlatformsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetPlatforms GraphQL operation\r\n    /// <code>\r\n    /// query GetPlatforms {\r\n    ///   platform(order: { name: ASC }) {\r\n    ///     __typename\r\n    ///     id\r\n    ///     name\r\n    ///     ... on Platform {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public interface IGetPlatformsQuery : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPlatformsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPlatformsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the Commands GraphQL client\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class Commands : global::BlazorGQL.GraphQL.ICommands\r\n    {\r\n        private readonly global::BlazorGQL.GraphQL.IGetPlatformsQuery _getPlatforms;\r\n        public Commands(global::BlazorGQL.GraphQL.IGetPlatformsQuery getPlatforms)\r\n        {\r\n            _getPlatforms = getPlatforms ?? throw new global::System.ArgumentNullException(nameof(getPlatforms));\r\n        }\r\n\r\n        public static global::System.String ClientName => \"Commands\";\r\n        public global::BlazorGQL.GraphQL.IGetPlatformsQuery GetPlatforms => _getPlatforms;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the Commands GraphQL client\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public interface ICommands\r\n    {\r\n        global::BlazorGQL.GraphQL.IGetPlatformsQuery GetPlatforms { get; }\r\n    }\r\n}\r\n\r\nnamespace BlazorGQL.GraphQL.State\r\n{\r\n    ///<summary>Represents any SW or service with a command line</summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class PlatformEntity\r\n    {\r\n        public PlatformEntity(global::System.Int32 id = default !, global::System.String name = default !)\r\n        {\r\n            Id = id;\r\n            Name = name;\r\n        }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String Name { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class GetPlatformsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorGQL.GraphQL.GetPlatformsResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::BlazorGQL.GraphQL.State.PlatformEntity, GetPlatforms_Platform_Platform> _getPlatforms_Platform_PlatformFromPlatformEntityMapper;\r\n        public GetPlatformsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::BlazorGQL.GraphQL.State.PlatformEntity, GetPlatforms_Platform_Platform> getPlatforms_Platform_PlatformFromPlatformEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _getPlatforms_Platform_PlatformFromPlatformEntityMapper = getPlatforms_Platform_PlatformFromPlatformEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPlatforms_Platform_PlatformFromPlatformEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorGQL.GraphQL.IGetPlatformsResult);\r\n        public GetPlatformsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is GetPlatformsResultInfo info)\r\n            {\r\n                return new GetPlatformsResult(MapIGetPlatforms_PlatformArray(info.Platform, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"GetPlatformsResultInfo expected.\");\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::BlazorGQL.GraphQL.IGetPlatforms_Platform?>? MapIGetPlatforms_PlatformArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (list is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var platforms = new global::System.Collections.Generic.List<global::BlazorGQL.GraphQL.IGetPlatforms_Platform?>();\r\n            foreach (global::StrawberryShake.EntityId? child in list)\r\n            {\r\n                platforms.Add(MapIGetPlatforms_Platform(child, snapshot));\r\n            }\r\n\r\n            return platforms;\r\n        }\r\n\r\n        private global::BlazorGQL.GraphQL.IGetPlatforms_Platform? MapIGetPlatforms_Platform(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (entityId.Value.Name.Equals(\"Platform\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _getPlatforms_Platform_PlatformFromPlatformEntityMapper.Map(snapshot.GetEntity<global::BlazorGQL.GraphQL.State.PlatformEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class GetPlatformsResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public GetPlatformsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? platform, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            Platform = platform;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Platform { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new GetPlatformsResultInfo(Platform, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class GetPlatforms_Platform_PlatformFromPlatformEntityMapper : global::StrawberryShake.IEntityMapper<global::BlazorGQL.GraphQL.State.PlatformEntity, GetPlatforms_Platform_Platform>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public GetPlatforms_Platform_PlatformFromPlatformEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public GetPlatforms_Platform_Platform Map(global::BlazorGQL.GraphQL.State.PlatformEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new GetPlatforms_Platform_Platform(entity.Id, entity.Name);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class GetPlatformsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorGQL.GraphQL.IGetPlatformsResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorGQL.GraphQL.IGetPlatformsResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        public GetPlatformsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorGQL.GraphQL.IGetPlatformsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IGetPlatformsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IGetPlatformsResult Result, GetPlatformsResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IGetPlatformsResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IGetPlatformsResult, GetPlatformsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? platformId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                platformId = UpdateIGetPlatforms_PlatformEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"platform\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new GetPlatformsResultInfo(platformId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetPlatforms_PlatformEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var platforms = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();\r\n            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())\r\n            {\r\n                platforms.Add(UpdateIGetPlatforms_PlatformEntity(session, child, entityIds));\r\n            }\r\n\r\n            return platforms;\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId? UpdateIGetPlatforms_PlatformEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"Platform\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BlazorGQL.GraphQL.State.PlatformEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::BlazorGQL.GraphQL.State.PlatformEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::BlazorGQL.GraphQL.State.PlatformEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _intParser.Parse(obj.Value.GetInt32()!);\r\n        }\r\n\r\n        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class CommandsEntityIdFactory : global::StrawberryShake.IEntityIdSerializer\r\n    {\r\n        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()\r\n        {Indented = false};\r\n        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            global::System.String __typename = obj.GetProperty(\"__typename\").GetString()!;\r\n            return __typename switch\r\n            {\r\n            \"Platform\" => ParsePlatformEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}\r\n\r\n            ;\r\n        }\r\n\r\n        public global::System.String Format(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            return entityId.Name switch\r\n            {\r\n            \"Platform\" => FormatPlatformEntityId(entityId), _ => throw new global::System.NotSupportedException()}\r\n\r\n            ;\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParsePlatformEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetInt32()!);\r\n        }\r\n\r\n        private global::System.String FormatPlatformEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteNumber(\"id\", (global::System.Int32)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public partial class CommandsStoreAccessor : global::StrawberryShake.StoreAccessor\r\n    {\r\n        public CommandsStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.2.2.0\")]\r\n    public static partial class CommandsServiceCollectionExtensions\r\n    {\r\n        public static global::StrawberryShake.IClientBuilder<global::BlazorGQL.GraphQL.State.CommandsStoreAccessor> AddCommands(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>\r\n            {\r\n                ConfigureClientDefault(sp, serviceCollection, strategy);\r\n                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::BlazorGQL.GraphQL.State.CommandsStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorGQL.GraphQL.GetPlatformsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorGQL.GraphQL.Commands>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorGQL.GraphQL.ICommands>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            return new global::StrawberryShake.ClientBuilder<global::BlazorGQL.GraphQL.State.CommandsStoreAccessor>(\"Commands\", services, serviceCollection);\r\n        }\r\n\r\n        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>\r\n            {\r\n                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);\r\n                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient(\"Commands\"));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BlazorGQL.GraphQL.State.PlatformEntity, global::BlazorGQL.GraphQL.GetPlatforms_Platform_Platform>, global::BlazorGQL.GraphQL.State.GetPlatforms_Platform_PlatformFromPlatformEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorGQL.GraphQL.IGetPlatformsResult>, global::BlazorGQL.GraphQL.State.GetPlatformsResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorGQL.GraphQL.IGetPlatformsResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorGQL.GraphQL.IGetPlatformsQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorGQL.GraphQL.IGetPlatformsResult>, global::BlazorGQL.GraphQL.State.GetPlatformsBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorGQL.GraphQL.IGetPlatformsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorGQL.GraphQL.IGetPlatformsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorGQL.GraphQL.IGetPlatformsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorGQL.GraphQL.GetPlatformsQuery>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorGQL.GraphQL.IGetPlatformsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorGQL.GraphQL.GetPlatformsQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::BlazorGQL.GraphQL.State.CommandsEntityIdFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorGQL.GraphQL.Commands>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorGQL.GraphQL.ICommands>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorGQL.GraphQL.Commands>(sp));\r\n            return services;\r\n        }\r\n\r\n        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable\r\n        {\r\n            private readonly System.IServiceProvider _provider;\r\n            public ClientServiceProvider(System.IServiceProvider provider)\r\n            {\r\n                _provider = provider;\r\n            }\r\n\r\n            public object? GetService(System.Type serviceType)\r\n            {\r\n                return _provider.GetService(serviceType);\r\n            }\r\n\r\n            public void Dispose()\r\n            {\r\n                if (_provider is System.IDisposable d)\r\n                {\r\n                    d.Dispose();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","Kind":0,"Hash":null,"Path":null}]